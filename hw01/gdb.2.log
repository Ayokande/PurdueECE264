No line 17 in the current file.
1	/* vim: set tabstop=4 shiftwidth=4 fileencoding=utf-8 noexpandtab: */
2	#include <stdio.h>
3	#include <stdlib.h>
4	#include "prime_factor.h"
5	
6	int main(int argc, char* argv[]) {
7		print_prime_factors(6);
8		print_prime_factors(1);  // should report "(none)"
9		print_prime_factors(0);  // should report "(none)"
10		print_prime_factors(48); // 2 2 2 2 3
11		print_prime_factors(49); // 7 7 (square number)
12		print_prime_factors(74); // 2 37
13	
14		return EXIT_SUCCESS;
15	}
Breakpoint 1 at 0x400601: file prime_factor.c, line 17.
Starting program: /home/shay/a/akande/hw01/prime_factor 

Breakpoint 1, print_prime_factors (n=6) at prime_factor.c:17
17	    if(n <= 0) {
Continuing.

Breakpoint 1, print_prime_factors (n=1) at prime_factor.c:17
17	    if(n <= 0) {
Continuing.

Breakpoint 1, print_prime_factors (n=0) at prime_factor.c:17
17	    if(n <= 0) {
Continuing.

Breakpoint 1, print_prime_factors (n=48) at prime_factor.c:17
17	    if(n <= 0) {
Continuing.

Breakpoint 1, print_prime_factors (n=49) at prime_factor.c:17
17	    if(n <= 0) {
12	|*           This is about finding bugs.             *|
13	|*                                                   *|
14	\*****************************************************/
15	
16	void print_prime_factors(int n) {
17	    if(n <= 0) {
18	        printf("Only positive numbers are supported.\n");
19	    }
20	    else {
21	        printf("Prime factors of %d:", n);
22	
23	        if(n == 1) {
24	            printf(" (none)");
25	        }
26	        else {
27	            // Print all occurrences of 2 in the prime factorization
28	            while(n % 2 == 0) {
29	                printf(" %d", 2);
30	                n /= 2;  // Divide n by 2 (integer division)
31	            }
32	
33	            // Try all odd integers, from 3 to sqrt(n)
34	            for(int i = 3; i * i < n; i += 2) {
35	
36	                // Print all occurrences of i in the prime factorization
37	                while(n % i == 0) {
38	                    printf(" %d", i);
39	                    n /= i; // Divide n by i (integer division)
40	                }
41	            }
print_prime_factors (n=49) at prime_factor.c:34
34	            for(int i = 3; i * i < n; i += 2) {
